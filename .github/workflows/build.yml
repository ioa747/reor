name: Build and Package Electron App
on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - "*"
jobs:
  build_and_package:
    strategy:
      matrix:
        include:
          - os: macos-13
          - os: macos-latest
          - os: windows-latest
            build_type: [cpu, gpu]
          - os: ubuntu-latest
            build_type: cpu
          - os: ubuntu-latest
            build_type: gpu
      fail-fast: false
    continue-on-error: true
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-
      - name: Cache TypeScript build
        uses: actions/cache@v3
        with:
          path: ./dist
          key: ${{ runner.os }}-tsc-${{ hashFiles('**/tsconfig.json') }}
          restore-keys: |
            ${{ runner.os }}-tsc-
      - name: Install dependencies
        run: npm install
      - name: Run Linter
        run: npm run lint
      - name: Run Tests
        run: npm run test
      - name: Debug - Show environment
        run: |
          echo "OS: ${{ matrix.os }}"
          echo "Build Type: ${{ matrix.build_type }}"
          echo "APP_VERSION: ${{ env.APP_VERSION }}"
      - name: Debug - List current directory
        run: ls -R
      - name: Set up environment for macOS build
        if: matrix.os == 'macos-13' || matrix.os == 'macos-latest'
        env:
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm run build
      - name: Build for Windows CPU
        if: matrix.os == 'windows-latest' && matrix.build_type == 'cpu'
        run: |
          echo "Running Windows CPU build"
          npm run build:win-cpu
      - name: Build for Windows GPU
        if: matrix.os == 'windows-latest' && matrix.build_type == 'gpu'
        run: |
          echo "Running Windows GPU build"
          npm run build:win-gpu
      - name: Build for Linux CPU
        if: matrix.os == 'ubuntu-latest' && matrix.build_type == 'cpu'
        run: |
          echo "Running Linux CPU build"
          npm run build:linux-cpu
      - name: Build for Linux GPU
        if: matrix.os == 'ubuntu-latest' && matrix.build_type == 'gpu'
        run: |
          echo "Running Linux GPU build"
          npm run build:linux-gpu
      - name: Debug - List directory after build
        run: ls -R
      - name: Notarize macOS build
        if: (matrix.os == 'macos-13' || matrix.os == 'macos-latest') && github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        run: npm run notarize
      - name: Set version as env
        run: echo "APP_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
      - name: Print APP_VERSION
        run: echo "APP_VERSION=${{ env.APP_VERSION }}"
      - name: List output files
        if: matrix.os != 'macos-13' && matrix.os != 'macos-latest' 
        run: |
          ls ./release/${{ env.APP_VERSION }}/
      - name: Check runner architecture
        if: matrix.os != 'macos-13' && matrix.os != 'macos-latest' 
        run: uname -m
      - name: Rename artifacts for ARM architecture
        if: matrix.os == 'macos-latest'
        run: |
          mv ./release/${{ env.APP_VERSION }}/*.dmg ./release/${{ env.APP_VERSION }}/Reor_${{ env.APP_VERSION }}-arm64.dmg
      - name: Rename artifacts for Intel architecture
        if: matrix.os == 'macos-13'
        run: |
          mv ./release/${{ env.APP_VERSION }}/*.dmg ./release/${{ env.APP_VERSION }}/Reor_${{ env.APP_VERSION }}-intel.dmg
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-${{ matrix.build_type }}-app
          path: |
            ./release/*/*.exe
            ./release/${{ env.APP_VERSION }}/**/*.AppImage
            ./release/${{ env.APP_VERSION }}/*-arm64.dmg
            ./release/${{ env.APP_VERSION }}/*-intel.dmg